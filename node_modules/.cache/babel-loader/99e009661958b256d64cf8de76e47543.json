{"ast":null,"code":"var _jsxFileName = \"/home/walder/workspace/iss/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport issService from './services/issService';\nimport geolocationService from './services/geolocationService';\nimport { postCoordinateB, postCoordinateA, getCoordinate } from './backend/pouchDB';\n\nconst App = () => {\n  const [issData, setIssData] = useState(null);\n  const [geoData, setGeoData] = useState(null);\n  const [coordinateA, setCoordinateA] = useState({});\n  const [coordinateB, setCoordinateB] = useState({});\n  useEffect(() => {\n    updateISSData();\n    getCoordinates();\n  }, []);\n  const style = {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto'\n  };\n\n  const getCoordinates = async () => {\n    const responseA = await getCoordinate('coordinateA');\n    setCoordinateA({\n      latitude: responseA.latitude,\n      longitude: responseA.longitude\n    });\n    const responseB = await getCoordinate('coordinateB');\n    setCoordinateB({\n      latitude: responseB.latitude,\n      longitude: responseB.longitude\n    });\n  };\n\n  const isAround = () => {\n    let lat = issData.iss_position.latitude;\n    let long = issData.iss_position.longitude;\n    if (Number(lat) < coordinateB.latitude) return 'No';else if (Number(lat) > Number(coordinateA.latitude)) return 'No';else if (Number(long) < Number(coordinateA.longitude)) return 'No';else if (Number(long) > Number(coordinateB.longitude)) return 'No';else {\n      console.log('sending...');\n      sendNotification();\n      return 'Yes';\n    }\n  };\n\n  const sendNotification = async () => {\n    const templateId = 'template_vK0F4z4Q';\n    const serviceId = 'securebox20_gmail_com';\n    const params = {\n      from_name: 'issTracker',\n      to_name: 'Daniel'\n    };\n\n    try {\n      await window.emailjs.send(serviceId, templateId, params);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleCoordinates = async e => {\n    e.preventDefault();\n    await postCoordinateA(coordinateA.latitude, coordinateA.longitude);\n    await postCoordinateB(coordinateB.latitude, coordinateB.longitude);\n  };\n\n  const getISSData = async () => {\n    setInterval(async () => {\n      setIssData((await issService.getLocation()));\n    }, 1000 * 60 * 5);\n    console.log('get iss data'); //setIssData(await issService.getLocation())\n  };\n\n  const updateISSData = async () => {\n    console.log('get iss data');\n    setIssData((await issService.getLocation()));\n    getISSData();\n  };\n\n  const getGeoData = async () => {\n    console.log('get location data');\n    setGeoData((await geolocationService.getLocation(issData.iss_position.longitude, issData.iss_position.latitude)));\n    getISSData();\n  };\n\n  const handleGeoLocation = () => {\n    if (geoData === null) {\n      return 'Geographical Location: needs to be determined';\n    } else if (geoData.status !== 'OK') {\n      return 'Geographical Location: unknown';\n    } else {\n      return `Geographical Location: ${geoData.results[0].formatted_address}`;\n    }\n  };\n\n  if (issData === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }, \"ISS Location Tracker\"), \"Loading data...\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, \"ISS Location Tracker\"), /*#__PURE__*/React.createElement(\"div\", {\n      style: style,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"Current Location:\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => updateISSData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, \"Update Location\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 77\n      }\n    }), \"Latitude: \", issData.iss_position.latitude, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 54\n      }\n    }), \"Longitude: \", issData.iss_position.longitude, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 56\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, \"GeoLocation:\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => getGeoData(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, \"Determine GeoLocation\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 80\n      }\n    }), handleGeoLocation(), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 34\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, \"Scan Area:\"), \"Area Coordinates: \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 31\n      }\n    }), \"Coordinate A: \", coordinateA.latitude, \", \", coordinateA.longitude, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 74\n      }\n    }), \"Coordinate B: \", coordinateB.latitude, \", \", coordinateB.longitude, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 74\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }), \"Is the ISS in the area? \", isAround(), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 49\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"Set Area to Scan\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleCoordinates,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }, \"Coordinate A Latitude \", /*#__PURE__*/React.createElement(\"input\", {\n      defaultValue: coordinateA.latitude,\n      onChange: ({\n        target\n      }) => setCoordinateA({\n        latitude: target.value,\n        longitude: coordinateA.longitude\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 44\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, \"Coordinate A Longitude \", /*#__PURE__*/React.createElement(\"input\", {\n      defaultValue: coordinateA.longitude,\n      onChange: ({\n        target\n      }) => setCoordinateA({\n        latitude: coordinateA.latitude,\n        longitude: target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }\n    }, \"Coordinate B Latitude \", /*#__PURE__*/React.createElement(\"input\", {\n      defaultValue: coordinateB.latitude,\n      onChange: ({\n        target\n      }) => setCoordinateB({\n        latitude: target.value,\n        longitude: coordinateB.longitude\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 44\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, \"Coordinate B Longitude \", /*#__PURE__*/React.createElement(\"input\", {\n      defaultValue: coordinateB.longitude,\n      onChange: ({\n        target\n      }) => setCoordinateB({\n        latitude: coordinateB.latitude,\n        longitude: target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"Submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, \"Save\")))));\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/home/walder/workspace/iss/src/App.js"],"names":["React","useState","useEffect","issService","geolocationService","postCoordinateB","postCoordinateA","getCoordinate","App","issData","setIssData","geoData","setGeoData","coordinateA","setCoordinateA","coordinateB","setCoordinateB","updateISSData","getCoordinates","style","display","gridTemplateColumns","responseA","latitude","longitude","responseB","isAround","lat","iss_position","long","Number","console","log","sendNotification","templateId","serviceId","params","from_name","to_name","window","emailjs","send","err","handleCoordinates","e","preventDefault","getISSData","setInterval","getLocation","getGeoData","handleGeoLocation","status","results","formatted_address","textAlign","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA2CC,aAA3C,QAAgE,mBAAhE;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAEhB,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACY,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,EAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,aAAa;AACbC,IAAAA,cAAc;AACf,GAHQ,EAGN,EAHM,CAAT;AAMA,QAAMC,KAAK,GAAG;AACZC,IAAAA,OAAO,EAAE,MADG;AAEZC,IAAAA,mBAAmB,EAAE;AAFT,GAAd;;AAKA,QAAMH,cAAc,GAAG,YAAY;AACjC,UAAMI,SAAS,GAAG,MAAMf,aAAa,CAAC,aAAD,CAArC;AACAO,IAAAA,cAAc,CAAC;AAACS,MAAAA,QAAQ,EAAED,SAAS,CAACC,QAArB;AAA+BC,MAAAA,SAAS,EAAEF,SAAS,CAACE;AAApD,KAAD,CAAd;AACA,UAAMC,SAAS,GAAG,MAAMlB,aAAa,CAAC,aAAD,CAArC;AACAS,IAAAA,cAAc,CAAC;AAACO,MAAAA,QAAQ,EAAEE,SAAS,CAACF,QAArB;AAA+BC,MAAAA,SAAS,EAAEC,SAAS,CAACD;AAApD,KAAD,CAAd;AACD,GALD;;AAOA,QAAME,QAAQ,GAAG,MAAM;AACrB,QAAIC,GAAG,GAAGlB,OAAO,CAACmB,YAAR,CAAqBL,QAA/B;AACA,QAAIM,IAAI,GAAGpB,OAAO,CAACmB,YAAR,CAAqBJ,SAAhC;AAGA,QAAGM,MAAM,CAACH,GAAD,CAAN,GAAcZ,WAAW,CAACQ,QAA7B,EAAuC,OAAO,IAAP,CAAvC,KACK,IAAIO,MAAM,CAACH,GAAD,CAAN,GAAcG,MAAM,CAACjB,WAAW,CAACU,QAAb,CAAxB,EAAgD,OAAO,IAAP,CAAhD,KACA,IAAIO,MAAM,CAACD,IAAD,CAAN,GAAeC,MAAM,CAACjB,WAAW,CAACW,SAAb,CAAzB,EAAkD,OAAO,IAAP,CAAlD,KACA,IAAIM,MAAM,CAACD,IAAD,CAAN,GAAeC,MAAM,CAACf,WAAW,CAACS,SAAb,CAAzB,EAAkD,OAAO,IAAP,CAAlD,KACA;AACHO,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAC,MAAAA,gBAAgB;AAChB,aAAO,KAAP;AACD;AACF,GAdD;;AAgBA,QAAMA,gBAAgB,GAAG,YAAY;AACnC,UAAMC,UAAU,GAAG,mBAAnB;AACA,UAAMC,SAAS,GAAG,uBAAlB;AACA,UAAMC,MAAM,GAAG;AACbC,MAAAA,SAAS,EAAE,YADE;AAEbC,MAAAA,OAAO,EAAE;AAFI,KAAf;;AAIA,QAAG;AACD,YAAMC,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBN,SAApB,EAA+BD,UAA/B,EAA2CE,MAA3C,CAAN;AACD,KAFD,CAEC,OAAMM,GAAN,EAAU;AACTX,MAAAA,OAAO,CAACC,GAAR,CAAYU,GAAZ;AACD;AACF,GAZD;;AAcA,QAAMC,iBAAiB,GAAG,MAAOC,CAAP,IAAa;AACrCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMvC,eAAe,CAACO,WAAW,CAACU,QAAb,EAAuBV,WAAW,CAACW,SAAnC,CAArB;AACA,UAAMnB,eAAe,CAACU,WAAW,CAACQ,QAAb,EAAuBR,WAAW,CAACS,SAAnC,CAArB;AAED,GALD;;AAOA,QAAMsB,UAAU,GAAG,YAAY;AAC3BC,IAAAA,WAAW,CAAC,YAAY;AAACrC,MAAAA,UAAU,EAAC,MAAMP,UAAU,CAAC6C,WAAX,EAAP,EAAV;AAA2C,KAAzD,EAA2D,OAAK,EAAL,GAAQ,CAAnE,CAAX;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAF2B,CAG3B;AAEH,GALD;;AAOA,QAAMf,aAAa,GAAG,YAAY;AAChCc,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAtB,IAAAA,UAAU,EAAC,MAAMP,UAAU,CAAC6C,WAAX,EAAP,EAAV;AACAF,IAAAA,UAAU;AACX,GAJD;;AAMA,QAAMG,UAAU,GAAG,YAAY;AAC7BlB,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACApB,IAAAA,UAAU,EAAC,MAAMR,kBAAkB,CAAC4C,WAAnB,CAA+BvC,OAAO,CAACmB,YAAR,CAAqBJ,SAApD,EAA+Df,OAAO,CAACmB,YAAR,CAAqBL,QAApF,CAAP,EAAV;AACAuB,IAAAA,UAAU;AACX,GAJD;;AAMA,QAAMI,iBAAiB,GAAG,MAAM;AAC9B,QAAGvC,OAAO,KAAK,IAAf,EAAoB;AAClB,aAAO,+CAAP;AACD,KAFD,MAEM,IAAIA,OAAO,CAACwC,MAAR,KAAmB,IAAvB,EAA4B;AAChC,aAAO,gCAAP;AACD,KAFK,MAED;AACH,aAAQ,0BAAyBxC,OAAO,CAACyC,OAAR,CAAgB,CAAhB,EAAmBC,iBAAkB,EAAtE;AACD;AACF,GARD;;AAUA,MAAG5C,OAAO,KAAK,IAAf,EAAoB;AAClB,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,oBADF;AAMD,GAPD,MAOO;AACL,wBAEE;AAAK,MAAA,KAAK,EAAE;AAAE6C,QAAAA,SAAS,EAAE;AAAb,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,eAEE;AAAK,MAAA,KAAK,EAAEnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMF,aAAa,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAFF,eAEkE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFlE,gBAGaR,OAAO,CAACmB,YAAR,CAAqBL,QAHlC,eAG2C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH3C,iBAIcd,OAAO,CAACmB,YAAR,CAAqBJ,SAJnC,eAI6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ7C,CADF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMyB,UAAU,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAFF,eAEqE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFrE,EAGGC,iBAAiB,EAHpB,eAGuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHvB,CAPF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,qCAEoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFpB,oBAGiBrC,WAAW,CAACU,QAH7B,QAGyCV,WAAW,CAACW,SAHrD,eAG+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH/D,oBAIiBT,WAAW,CAACQ,QAJ7B,QAIyCR,WAAW,CAACS,SAJrD,eAI+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ/D,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,8BAM2BE,QAAQ,EANnC,eAMsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANtC,CAZF,eAoBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEI;AAAM,MAAA,QAAQ,EAAEiB,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAA2B;AAAO,MAAA,YAAY,EAAE9B,WAAW,CAACU,QAAjC;AAA2C,MAAA,QAAQ,EAAE,CAAC;AAACgC,QAAAA;AAAD,OAAD,KAAczC,cAAc,CAAC;AAACS,QAAAA,QAAQ,EAAEgC,MAAM,CAACC,KAAlB;AAAyBhC,QAAAA,SAAS,EAAEX,WAAW,CAACW;AAAhD,OAAD,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B,CADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAA4B;AAAO,MAAA,YAAY,EAAEX,WAAW,CAACW,SAAjC;AAA4C,MAAA,QAAQ,EAAE,CAAC;AAAC+B,QAAAA;AAAD,OAAD,KAAczC,cAAc,CAAC;AAACS,QAAAA,QAAQ,EAAEV,WAAW,CAACU,QAAvB;AAAiCC,QAAAA,SAAS,EAAE+B,MAAM,CAACC;AAAnD,OAAD,CAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAA2B;AAAO,MAAA,YAAY,EAAEzC,WAAW,CAACQ,QAAjC;AAA2C,MAAA,QAAQ,EAAE,CAAC;AAACgC,QAAAA;AAAD,OAAD,KAAcvC,cAAc,CAAC;AAACO,QAAAA,QAAQ,EAAEgC,MAAM,CAACC,KAAlB;AAAyBhC,QAAAA,SAAS,EAAET,WAAW,CAACS;AAAhD,OAAD,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA3B,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAA4B;AAAO,MAAA,YAAY,EAAET,WAAW,CAACS,SAAjC;AAA4C,MAAA,QAAQ,EAAE,CAAC;AAAC+B,QAAAA;AAAD,OAAD,KAAcvC,cAAc,CAAC;AAACO,QAAAA,QAAQ,EAAER,WAAW,CAACQ,QAAvB;AAAiCC,QAAAA,SAAS,EAAE+B,MAAM,CAACC;AAAnD,OAAD,CAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B,CAJF,eAKE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,CAFJ,CApBF,CAFF,CAFF;AAqCD;AACF,CAzID;;AA2IA,eAAehD,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport issService from './services/issService'\nimport geolocationService from './services/geolocationService'\nimport { postCoordinateB, postCoordinateA, getCoordinate } from './backend/pouchDB'\n\nconst App = () => {\n\n  const [issData, setIssData] = useState(null)\n  const [geoData, setGeoData] = useState(null)\n  const [coordinateA, setCoordinateA] = useState({})\n  const [coordinateB, setCoordinateB] = useState({})\n\n  useEffect(() => {\n    updateISSData()\n    getCoordinates()\n  }, []);\n\n\n  const style = {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto',\n  }\n\n  const getCoordinates = async () => {\n    const responseA = await getCoordinate('coordinateA')\n    setCoordinateA({latitude: responseA.latitude, longitude: responseA.longitude})\n    const responseB = await getCoordinate('coordinateB')\n    setCoordinateB({latitude: responseB.latitude, longitude: responseB.longitude})\n  }\n\n  const isAround = () => {\n    let lat = issData.iss_position.latitude\n    let long = issData.iss_position.longitude\n\n\n    if(Number(lat) < coordinateB.latitude) return 'No' \n    else if (Number(lat) > Number(coordinateA.latitude)) return 'No'\n    else if (Number(long) < Number(coordinateA.longitude)) return 'No'\n    else if (Number(long) > Number(coordinateB.longitude)) return 'No'\n    else {\n      console.log('sending...')\n      sendNotification()\n      return 'Yes'\n    }\n  }\n\n  const sendNotification = async () => {\n    const templateId = 'template_vK0F4z4Q'\n    const serviceId = 'securebox20_gmail_com'\n    const params = {\n      from_name: 'issTracker',\n      to_name: 'Daniel'\n    }\n    try{\n      await window.emailjs.send(serviceId, templateId, params)\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n  const handleCoordinates = async (e) => {\n    e.preventDefault()\n    await postCoordinateA(coordinateA.latitude, coordinateA.longitude)\n    await postCoordinateB(coordinateB.latitude, coordinateB.longitude)\n\n  }\n\n  const getISSData = async () => {\n      setInterval(async () => {setIssData(await issService.getLocation())}, 1000*60*5);\n      console.log('get iss data')\n      //setIssData(await issService.getLocation())\n    \n  }\n\n  const updateISSData = async () => {\n    console.log('get iss data')\n    setIssData(await issService.getLocation())\n    getISSData()\n  }\n\n  const getGeoData = async () => {\n    console.log('get location data')\n    setGeoData(await geolocationService.getLocation(issData.iss_position.longitude, issData.iss_position.latitude))\n    getISSData()\n  }\n\n  const handleGeoLocation = () => {\n    if(geoData === null){\n      return 'Geographical Location: needs to be determined'\n    }else if (geoData.status !== 'OK'){\n      return 'Geographical Location: unknown'\n    }else{\n      return `Geographical Location: ${geoData.results[0].formatted_address}`\n    }\n  }\n\n  if(issData === null){\n    return(\n      <div>\n        <h1>ISS Location Tracker</h1>\n        Loading data...\n      </div>\n    )\n  } else {\n    return (\n\n      <div style={{ textAlign: 'center' }}>\n        <h1>ISS Location Tracker</h1>\n        <div style={style}>\n          <div>\n            <h2>Current Location:</h2>\n            <button onClick={() => updateISSData()}>Update Location</button><br />\n            Latitude: {issData.iss_position.latitude}<br />\n            Longitude: {issData.iss_position.longitude}<br />\n          </div>\n          <div>        \n            <h2>GeoLocation:</h2>\n            <button onClick={() => getGeoData()}>Determine GeoLocation</button><br />\n            {handleGeoLocation()}<br/>\n          </div>\n          <div>\n            <h2>Scan Area:</h2>\n            Area Coordinates: <br/>\n            Coordinate A: {coordinateA.latitude}, {coordinateA.longitude}<br/>\n            Coordinate B: {coordinateB.latitude}, {coordinateB.longitude}<br/>\n            <br/>\n            Is the ISS in the area? {isAround()}<br/>\n          </div>\n          <div>\n            <h2>Set Area to Scan</h2>\n              <form onSubmit={handleCoordinates}>\n                <div>Coordinate A Latitude <input defaultValue={coordinateA.latitude} onChange={({target}) => setCoordinateA({latitude: target.value, longitude: coordinateA.longitude})}/></div>\n                <div>Coordinate A Longitude <input defaultValue={coordinateA.longitude} onChange={({target}) => setCoordinateA({latitude: coordinateA.latitude, longitude: target.value})}/></div>\n                <div>Coordinate B Latitude <input defaultValue={coordinateB.latitude} onChange={({target}) => setCoordinateB({latitude: target.value, longitude: coordinateB.longitude})}/></div>\n                <div>Coordinate B Longitude <input defaultValue={coordinateB.longitude} onChange={({target}) => setCoordinateB({latitude: coordinateB.latitude, longitude: target.value})}/></div>\n                <button type='Submit'>Save</button>\n              </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}