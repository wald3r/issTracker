{"version":3,"sources":["services/issService.js","services/geolocationService.js","services/backendService.js","App.js","serviceWorker.js","index.js"],"names":["getLocation","a","axios","get","response","data","longitude","latitude","sendLocation","obj","post","importNotification","setCoordinates","getCoordinates","App","useState","issData","setIssData","geoData","setGeoData","coordinateA","setCoordinateA","coordinateB","setCoordinateB","useEffect","handleISSData","backendService","aLat","aLong","bLat","bLong","sendNotification","params","from_name","to_name","window","emailjs","send","console","log","getISSData","setInterval","location","reload","issService","tmp","getGeoData","geolocationService","iss_position","handleCoordinates","e","preventDefault","style","textAlign","display","gridTemplateColumns","onClick","status","results","formatted_address","lat","long","Number","isAround","onSubmit","defaultValue","onChange","target","value","type","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46b369ea.chunk.js","sourcesContent":["import axios from 'axios'\n\n\nconst getLocation = async () => {\n  const response = await axios.get(`http://api.open-notify.org/iss-now.json`)\n  return response.data\n}\n\nexport default { getLocation }","import axios from 'axios'\n\nconst api_key = 'AIzaSyBxTSW87jEF7J9G7fz6RXlzDMBlOqXYTiQ'\n\nconst getLocation = async (longitude, latitude) => {\n  const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${latitude},${longitude}&key=${api_key}`)\n  return response.data\n}\n\n\nexport default { getLocation }","import axios from 'axios'\n\nconst sendLocation = async (obj) => {\n\n  const response = await axios.post('/api/iss', obj)\n  return response\n\n}\n\nconst importNotification = async () => {\n  const response = await axios.get('/api/iss/notification')\n  return response\n}\n\nconst setCoordinates = async (obj) => {\n  const response = await axios.post('/api/iss/coordinates', obj)\n  return response\n}\n\nconst getCoordinates = async (obj) => {\n  const response = await axios.get('/api/iss/coordinates')\n  return response.data\n}\n\nexport default { sendLocation, importNotification, getCoordinates, setCoordinates }","import React, { useState, useEffect } from 'react';\nimport issService from './services/issService'\nimport geolocationService from './services/geolocationService'\nimport backendService from './services/backendService'\n\nconst App = () => {\n\n  const [issData, setIssData] = useState(null)\n  const [geoData, setGeoData] = useState(null)\n  const [coordinateA, setCoordinateA] = useState({latitude: 50, longitude: 50})\n  const [coordinateB, setCoordinateB] = useState({latitude: 50, longitude: 50})\n  \n  \n  useEffect(() => {\n    handleISSData()\n    getCoordinates()\n  }, []);\n\n\n  const style = {\n    display: 'grid',\n    gridTemplateColumns: 'auto auto',\n  }\n\n\n  const getCoordinates = async () => {\n    const data = await backendService.getCoordinates()\n\n    setCoordinateA({latitude: data.aLat, longitude: data.aLong})\n    setCoordinateB({latitude: data.bLat, longitude: data.bLong})\n  }\n\n  const isAround = () => {\n    let lat = issData.iss_position.latitude\n    let long = issData.iss_position.longitude\n\n    if(Number(lat) < coordinateB.latitude) return 'No' \n    else if (Number(lat) > Number(coordinateA.latitude)) return 'No'\n    else if (Number(long) < Number(coordinateA.longitude)) return 'No'\n    else if (Number(long) > Number(coordinateB.longitude)) return 'No'\n    else {\n      console.log('sending...')        \n      sendNotification()\n      backendService.importNotification()\n      return 'Yes'\n    }\n  }\n\n  const sendNotification = async () => {\n    const templateId = 'template_vK0F4z4Q'\n    const serviceId = 'iss_tracker'\n    const params = {\n      from_name: 'issTracker',\n      to_name: 'Daniel'\n    }\n    try{\n      await window.emailjs.send(serviceId, templateId, params)\n    }catch(err){\n      console.log(err)\n    }\n  }\n\n\n  const getISSData = async () => {\n      setInterval(() => { window.location.reload() }, 1000*60)\n      \n  }\n\n\n  const handleISSData = async () => {\n \n    console.log('get iss data')\n    const tmp = await issService.getLocation()\n    //await backendService.sendLocation({latitude: tmp.iss_position.latitude, longitude: tmp.iss_position.longitude})\n    setIssData(tmp)\n    getISSData()\n    \n\n  }\n\n\n  const getGeoData = async () => {\n    console.log('get location data')\n    setGeoData(await geolocationService.getLocation(issData.iss_position.longitude, issData.iss_position.latitude))\n  }\n\n  const handleGeoLocation = () => {\n    if(geoData === null){\n      return 'Geographical Location: needs to be determined'\n    }else if (geoData.status !== 'OK'){\n      return 'Geographical Location: unknown'\n    }else{\n      return `Geographical Location: ${geoData.results[0].formatted_address}`\n    }\n  }\n\n  const handleCoordinates = async (e) => {\n    e.preventDefault()\n    await backendService.setCoordinates({ coordinateA: { latitude: coordinateA.latitude, longitude: coordinateA.longitude }, coordinateB: { latitude: coordinateB.latitude, longitude: coordinateB.longitude }})\n    \n  }\n\n  if(issData === null){\n    return(\n      <div>\n        <h1>ISS Location Tracker</h1>\n        Loading data...\n      </div>\n    )\n  } else {\n  \n\n    return (\n      <div style={{ textAlign: 'center' }}>\n        <h1>ISS Location Tracker</h1>\n        <div style={style}>\n          <div>\n            <h2>Current Location:</h2>\n    \n            <button onClick={() => handleISSData()}>Update Location</button><br />\n            Latitude: {issData.iss_position.latitude}<br />\n            Longitude: {issData.iss_position.longitude}<br />\n          </div>\n          <div>        \n            <h2>GeoLocation:</h2>\n            <div><button onClick={() => getGeoData()}>Determine GeoLocation</button></div><br />\n            {handleGeoLocation()}<br/>\n          </div>\n          <div>\n            <h2>Scan Area:</h2>\n            Area Coordinates: <br/>\n            Coordinate A: {coordinateA.latitude}, {coordinateA.longitude}<br/>\n            Coordinate B: {coordinateB.latitude}, {coordinateB.longitude}<br/>\n            <br/>\n            Is the ISS in the area? {isAround()}<br/>\n          </div>\n          <div>\n            <h2>Set Area to Scan</h2>\n              <form onSubmit={handleCoordinates}>\n                <div>Coordinate A Latitude <input defaultValue={coordinateA.latitude} onChange={({target}) => setCoordinateA({latitude: target.value, longitude: coordinateA.longitude})}/></div>\n                <div>Coordinate A Longitude <input defaultValue={coordinateA.longitude} onChange={({target}) => setCoordinateA({latitude: coordinateA.latitude, longitude: target.value})}/></div>\n                <div>Coordinate B Latitude <input defaultValue={coordinateB.latitude} onChange={({target}) => setCoordinateB({latitude: target.value, longitude: coordinateB.longitude})}/></div>\n                <div>Coordinate B Longitude <input defaultValue={coordinateB.longitude} onChange={({target}) => setCoordinateB({latitude: coordinateB.latitude, longitude: target.value})}/></div>\n                <button type='Submit'>Save</button>\n              </form>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}